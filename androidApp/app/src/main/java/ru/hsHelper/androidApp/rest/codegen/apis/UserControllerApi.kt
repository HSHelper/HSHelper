/**
 * NOTE: This class is auto generated by the Swagger Gradle Codegen for the following API: Api Documentation
 *
 * More info on this tool is available on https://github.com/Yelp/swagger-gradle-codegen
 */

package ru.hsHelper.androidApp.rest.codegen.apis

import retrofit2.http.DELETE
import retrofit2.http.GET
import retrofit2.http.Headers
import retrofit2.http.POST
import retrofit2.http.PUT
import ru.hsHelper.androidApp.rest.codegen.models.Notification
import ru.hsHelper.androidApp.rest.codegen.models.ObjectsWithRoleAddRequest
import ru.hsHelper.androidApp.rest.codegen.models.ObjectsWithSolutionsAddRequest
import ru.hsHelper.androidApp.rest.codegen.models.PartitionAddRequest
import ru.hsHelper.androidApp.rest.codegen.models.User
import ru.hsHelper.androidApp.rest.codegen.models.UserCoursePartRole
import ru.hsHelper.androidApp.rest.codegen.models.UserCourseRole
import ru.hsHelper.androidApp.rest.codegen.models.UserCreateRequest
import ru.hsHelper.androidApp.rest.codegen.models.UserGroupRole
import ru.hsHelper.androidApp.rest.codegen.models.UserToPartition
import ru.hsHelper.androidApp.rest.codegen.models.UserUpdateRequest
import ru.hsHelper.androidApp.rest.codegen.models.UserWork
import ru.hsHelper.androidApp.rest.codegen.models.UserWorkUpdateRequest

@JvmSuppressWildcards
interface UserControllerApi {
    /**
     * addCourseParts
     * The endpoint is owned by server REST api service owner
     * @param objectsWithRoleAddRequest objectsWithRoleAddRequest (required)
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: addCoursePartsUsingPUT",
      "Content-Type: application/json"
    )
    @PUT("users/{userId}/course-parts")
    suspend fun addCoursePartsUsingPUT(
        @retrofit2.http.Body objectsWithRoleAddRequest: ObjectsWithRoleAddRequest,
        @retrofit2.http.Path("userId") userId: Long
    ): User
    /**
     * addCourses
     * The endpoint is owned by server REST api service owner
     * @param objectsWithRoleAddRequest objectsWithRoleAddRequest (required)
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: addCoursesUsingPUT",
      "Content-Type: application/json"
    )
    @PUT("users/{userId}/courses")
    suspend fun addCoursesUsingPUT(
        @retrofit2.http.Body objectsWithRoleAddRequest: ObjectsWithRoleAddRequest,
        @retrofit2.http.Path("userId") userId: Long
    ): User
    /**
     * addGroups
     * The endpoint is owned by server REST api service owner
     * @param objectsWithRoleAddRequest objectsWithRoleAddRequest (required)
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: addGroupsUsingPUT",
      "Content-Type: application/json"
    )
    @PUT("users/{userId}/groups")
    suspend fun addGroupsUsingPUT(
        @retrofit2.http.Body objectsWithRoleAddRequest: ObjectsWithRoleAddRequest,
        @retrofit2.http.Path("userId") userId: Long
    ): User
    /**
     * addNotifications
     * The endpoint is owned by server REST api service owner
     * @param notificationIds notificationIds (required)
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: addNotificationsUsingPUT",
      "Content-Type: application/json"
    )
    @PUT("users/{userId}/notifications")
    suspend fun addNotificationsUsingPUT(
        @retrofit2.http.Body notificationIds: List<Long>,
        @retrofit2.http.Path("userId") userId: Long
    ): User
    /**
     * addToPartitions
     * The endpoint is owned by server REST api service owner
     * @param partitionAddRequest partitionAddRequest (required)
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: addToPartitionsUsingPUT",
      "Content-Type: application/json"
    )
    @PUT("users/{userId}/partitions")
    suspend fun addToPartitionsUsingPUT(
        @retrofit2.http.Body partitionAddRequest: PartitionAddRequest,
        @retrofit2.http.Path("userId") userId: Long
    ): User
    /**
     * addWorks
     * The endpoint is owned by server REST api service owner
     * @param objectsWithSolutionsAddRequest objectsWithSolutionsAddRequest (required)
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: addWorksUsingPUT",
      "Content-Type: application/json"
    )
    @PUT("users/{userId}/works")
    suspend fun addWorksUsingPUT(
        @retrofit2.http.Body objectsWithSolutionsAddRequest: ObjectsWithSolutionsAddRequest,
        @retrofit2.http.Path("userId") userId: Long
    ): User
    /**
     * createUser
     * The endpoint is owned by server REST api service owner
     * @param userCreateRequest userCreateRequest (required)
     */
    @Headers(
        "X-Operation-ID: createUserUsingPOST",
      "Content-Type: application/json"
    )
    @POST("users/")
    suspend fun createUserUsingPOST(
        @retrofit2.http.Body userCreateRequest: UserCreateRequest
    ): User
    /**
     * deleteCourseParts
     * The endpoint is owned by server REST api service owner
     * @param coursePartIds coursePartIds (required)
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: deleteCoursePartsUsingPOST",
      "Content-Type: application/json"
    )
    @POST("users/{userId}/course-parts")
    suspend fun deleteCoursePartsUsingPOST(
        @retrofit2.http.Body coursePartIds: List<Long>,
        @retrofit2.http.Path("userId") userId: Long
    ): User
    /**
     * deleteCourses
     * The endpoint is owned by server REST api service owner
     * @param courseIds courseIds (required)
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: deleteCoursesUsingPOST",
      "Content-Type: application/json"
    )
    @POST("users/{userId}/courses")
    suspend fun deleteCoursesUsingPOST(
        @retrofit2.http.Body courseIds: List<Long>,
        @retrofit2.http.Path("userId") userId: Long
    ): User
    /**
     * deleteGroups
     * The endpoint is owned by server REST api service owner
     * @param groupIds groupIds (required)
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: deleteGroupsUsingPOST",
      "Content-Type: application/json"
    )
    @POST("users/{userId}/groups")
    suspend fun deleteGroupsUsingPOST(
        @retrofit2.http.Body groupIds: List<Long>,
        @retrofit2.http.Path("userId") userId: Long
    ): User
    /**
     * deleteNotifications
     * The endpoint is owned by server REST api service owner
     * @param notificationIds notificationIds (required)
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: deleteNotificationsUsingPOST",
      "Content-Type: application/json"
    )
    @POST("users/{userId}/notifications")
    suspend fun deleteNotificationsUsingPOST(
        @retrofit2.http.Body notificationIds: List<Long>,
        @retrofit2.http.Path("userId") userId: Long
    ): User
    /**
     * deletePartitions
     * The endpoint is owned by server REST api service owner
     * @param partitionIds partitionIds (required)
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: deletePartitionsUsingPOST",
      "Content-Type: application/json"
    )
    @POST("users/{userId}/partitions")
    suspend fun deletePartitionsUsingPOST(
        @retrofit2.http.Body partitionIds: List<Long>,
        @retrofit2.http.Path("userId") userId: Long
    ): User
    /**
     * deleteUser
     * The endpoint is owned by server REST api service owner
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: deleteUserUsingDELETE"
    )
    @DELETE("users/{userId}")
    suspend fun deleteUserUsingDELETE(
        @retrofit2.http.Path("userId") userId: Long
    ): Unit
    /**
     * deleteWorks
     * The endpoint is owned by server REST api service owner
     * @param groupIds groupIds (required)
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: deleteWorksUsingPOST",
      "Content-Type: application/json"
    )
    @POST("users/{userId}/works")
    suspend fun deleteWorksUsingPOST(
        @retrofit2.http.Body groupIds: List<Long>,
        @retrofit2.http.Path("userId") userId: Long
    ): User
    /**
     * getAllNotifications
     * The endpoint is owned by server REST api service owner
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: getAllNotificationsUsingGET_1"
    )
    @GET("users/{userId}/notifications")
    suspend fun getAllNotificationsUsingGET1(
        @retrofit2.http.Path("userId") userId: Long
    ): List<Notification>
    /**
     * getAllUserCoursePartRoles
     * The endpoint is owned by server REST api service owner
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: getAllUserCoursePartRolesUsingGET_1"
    )
    @GET("users/{userId}/course-parts")
    suspend fun getAllUserCoursePartRolesUsingGET1(
        @retrofit2.http.Path("userId") userId: Long
    ): List<UserCoursePartRole>
    /**
     * getAllUserCourseRoles
     * The endpoint is owned by server REST api service owner
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: getAllUserCourseRolesUsingGET_1"
    )
    @GET("users/{userId}/courses")
    suspend fun getAllUserCourseRolesUsingGET1(
        @retrofit2.http.Path("userId") userId: Long
    ): List<UserCourseRole>
    /**
     * getAllUserGroupRoles
     * The endpoint is owned by server REST api service owner
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: getAllUserGroupRolesUsingGET_1"
    )
    @GET("users/{userId}/groups")
    suspend fun getAllUserGroupRolesUsingGET1(
        @retrofit2.http.Path("userId") userId: Long
    ): List<UserGroupRole>
    /**
     * getAllUserToPartitions
     * The endpoint is owned by server REST api service owner
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: getAllUserToPartitionsUsingGET_1"
    )
    @GET("users/{userId}/partitions")
    suspend fun getAllUserToPartitionsUsingGET1(
        @retrofit2.http.Path("userId") userId: Long
    ): List<UserToPartition>
    /**
     * getAllUserWorksByCoursePart
     * The endpoint is owned by server REST api service owner
     * @param coursePartId coursePartId (required)
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: getAllUserWorksByCoursePartUsingGET"
    )
    @GET("users/{userId}/course-parts/{coursePartId}/works")
    suspend fun getAllUserWorksByCoursePartUsingGET(
        @retrofit2.http.Path("coursePartId") coursePartId: Long,
        @retrofit2.http.Path("userId") userId: Long
    ): List<UserWork>
    /**
     * getAllUserWorksByCourse
     * The endpoint is owned by server REST api service owner
     * @param courseId courseId (required)
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: getAllUserWorksByCourseUsingGET"
    )
    @GET("users/{userId}/courses/{courseId}/works")
    suspend fun getAllUserWorksByCourseUsingGET(
        @retrofit2.http.Path("courseId") courseId: Long,
        @retrofit2.http.Path("userId") userId: Long
    ): List<UserWork>
    /**
     * getAllUserWorksByGroup
     * The endpoint is owned by server REST api service owner
     * @param groupId groupId (required)
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: getAllUserWorksByGroupUsingGET"
    )
    @GET("users/{userId}/groups/{groupId}/works")
    suspend fun getAllUserWorksByGroupUsingGET(
        @retrofit2.http.Path("groupId") groupId: Long,
        @retrofit2.http.Path("userId") userId: Long
    ): List<UserWork>
    /**
     * getAllUserWorks
     * The endpoint is owned by server REST api service owner
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: getAllUserWorksUsingGET"
    )
    @GET("users/{userId}/works")
    suspend fun getAllUserWorksUsingGET(
        @retrofit2.http.Path("userId") userId: Long
    ): List<UserWork>
    /**
     * getAllUsers
     * The endpoint is owned by server REST api service owner
     */
    @Headers(
        "X-Operation-ID: getAllUsersUsingGET_1"
    )
    @GET("users/")
    suspend fun getAllUsersUsingGET1(): List<User>
    /**
     * getUserByEmail
     * The endpoint is owned by server REST api service owner
     * @param email email (required)
     */
    @Headers(
        "X-Operation-ID: getUserByEmailUsingGET"
    )
    @GET("users/email")
    suspend fun getUserByEmailUsingGET(
        @retrofit2.http.Query("email") email: String
    ): User
    /**
     * getUserCoursePartRole
     * The endpoint is owned by server REST api service owner
     * @param coursePartId coursePartId (required)
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: getUserCoursePartRoleUsingGET_1"
    )
    @GET("users/{userId}/course-parts/{coursePartId}")
    suspend fun getUserCoursePartRoleUsingGET1(
        @retrofit2.http.Path("coursePartId") coursePartId: Long,
        @retrofit2.http.Path("userId") userId: Long
    ): UserCoursePartRole
    /**
     * getUserCourseRole
     * The endpoint is owned by server REST api service owner
     * @param courseId courseId (required)
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: getUserCourseRoleUsingGET_1"
    )
    @GET("users/{userId}/courses/{courseId}")
    suspend fun getUserCourseRoleUsingGET1(
        @retrofit2.http.Path("courseId") courseId: Long,
        @retrofit2.http.Path("userId") userId: Long
    ): UserCourseRole
    /**
     * getUserGroupRole
     * The endpoint is owned by server REST api service owner
     * @param groupId groupId (required)
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: getUserGroupRoleUsingGET_1"
    )
    @GET("users/{userId}/groups/{groupId}")
    suspend fun getUserGroupRoleUsingGET1(
        @retrofit2.http.Path("groupId") groupId: Long,
        @retrofit2.http.Path("userId") userId: Long
    ): UserGroupRole
    /**
     * getUserToPartition
     * The endpoint is owned by server REST api service owner
     * @param partitionId partitionId (required)
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: getUserToPartitionUsingGET_1"
    )
    @GET("users/{userId}/partitions/{partitionId}")
    suspend fun getUserToPartitionUsingGET1(
        @retrofit2.http.Path("partitionId") partitionId: Long,
        @retrofit2.http.Path("userId") userId: Long
    ): UserToPartition
    /**
     * getUser
     * The endpoint is owned by server REST api service owner
     * @param userId userId (required)
     */
    @Headers(
        "X-Operation-ID: getUserUsingGET"
    )
    @GET("users/{userId}")
    suspend fun getUserUsingGET(
        @retrofit2.http.Path("userId") userId: Long
    ): User
    /**
     * getUserWork
     * The endpoint is owned by server REST api service owner
     * @param userId userId (required)
     * @param workId workId (required)
     */
    @Headers(
        "X-Operation-ID: getUserWorkUsingGET"
    )
    @GET("users/{userId}/works/{workId}")
    suspend fun getUserWorkUsingGET(
        @retrofit2.http.Path("userId") userId: Long,
        @retrofit2.http.Path("workId") workId: Long
    ): UserWork
    /**
     * updateUser
     * The endpoint is owned by server REST api service owner
     * @param userId userId (required)
     * @param userUpdateRequest userUpdateRequest (required)
     */
    @Headers(
        "X-Operation-ID: updateUserUsingPUT",
      "Content-Type: application/json"
    )
    @PUT("users/{userId}")
    suspend fun updateUserUsingPUT(
        @retrofit2.http.Path("userId") userId: Long,
        @retrofit2.http.Body userUpdateRequest: UserUpdateRequest
    ): User
    /**
     * updateUserWork
     * The endpoint is owned by server REST api service owner
     * @param userId userId (required)
     * @param userWorkUpdateRequest userWorkUpdateRequest (required)
     * @param workId workId (required)
     */
    @Headers(
        "X-Operation-ID: updateUserWorkUsingPUT",
      "Content-Type: application/json"
    )
    @PUT("users/{userId}/works/{workId}")
    suspend fun updateUserWorkUsingPUT(
        @retrofit2.http.Path("userId") userId: Long,
        @retrofit2.http.Body userWorkUpdateRequest: UserWorkUpdateRequest,
        @retrofit2.http.Path("workId") workId: Long
    ): UserWork
}
