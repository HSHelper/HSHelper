/**
 * NOTE: This class is auto generated by the Swagger Gradle Codegen for the following API: Api Documentation
 *
 * More info on this tool is available on https://github.com/Yelp/swagger-gradle-codegen
 */

package ru.hsHelper.androidApp.rest.codegen.apis

import retrofit2.http.DELETE
import retrofit2.http.GET
import retrofit2.http.Headers
import retrofit2.http.POST
import retrofit2.http.PUT
import ru.hsHelper.androidApp.rest.codegen.models.Permissions
import ru.hsHelper.androidApp.rest.codegen.models.Role

@JvmSuppressWildcards
interface RoleControllerApi {
    /**
     * addPermissions
     * The endpoint is owned by server REST api service owner
     * @param permissionIds permissionIds (required)
     * @param roleId roleId (required)
     */
    @Headers(
        "X-Operation-ID: addPermissionsUsingPUT",
      "Content-Type: application/json"
    )
    @PUT("roles/{roleId}/permissions/")
    suspend fun addPermissionsUsingPUT(
        @retrofit2.http.Body permissionIds: List<Long>,
        @retrofit2.http.Path("roleId") roleId: Long
    ): Role
    /**
     * createRole
     * The endpoint is owned by server REST api service owner
     * @param roleType roleType (required)
     */
    @Headers(
        "X-Operation-ID: createRoleUsingPOST",
      "Content-Type: application/json"
    )
    @POST("roles")
    suspend fun createRoleUsingPOST(
        @retrofit2.http.Body roleType: String
    ): Role
    /**
     * createRole
     * The endpoint is owned by server REST api service owner
     * @param roleType roleType (required)
     */
    @Headers(
        "X-Operation-ID: createRoleUsingPOST_1",
      "Content-Type: application/json"
    )
    @POST("roles/")
    suspend fun createRoleUsingPOST1(
        @retrofit2.http.Body roleType: String
    ): Role
    /**
     * deletePermissions
     * The endpoint is owned by server REST api service owner
     * @param permissionIds permissionIds (required)
     * @param roleId roleId (required)
     */
    @Headers(
        "X-Operation-ID: deletePermissionsUsingPOST",
      "Content-Type: application/json"
    )
    @POST("roles/{roleId}/permissions/")
    suspend fun deletePermissionsUsingPOST(
        @retrofit2.http.Body permissionIds: List<Long>,
        @retrofit2.http.Path("roleId") roleId: Long
    ): Role
    /**
     * deleteRole
     * The endpoint is owned by server REST api service owner
     * @param roleId roleId (required)
     */
    @Headers(
        "X-Operation-ID: deleteRoleUsingDELETE"
    )
    @DELETE("roles/{roleId}")
    suspend fun deleteRoleUsingDELETE(
        @retrofit2.http.Path("roleId") roleId: Long
    ): Unit
    /**
     * getAllPermissions
     * The endpoint is owned by server REST api service owner
     * @param roleId roleId (required)
     */
    @Headers(
        "X-Operation-ID: getAllPermissionsUsingGET_1"
    )
    @GET("roles/{roleId}/permissions")
    suspend fun getAllPermissionsUsingGET1(
        @retrofit2.http.Path("roleId") roleId: Long
    ): List<Permissions>
    /**
     * getAllRoles
     * The endpoint is owned by server REST api service owner
     */
    @Headers(
        "X-Operation-ID: getAllRolesUsingGET_1"
    )
    @GET("roles/")
    suspend fun getAllRolesUsingGET1(): List<Role>
    /**
     * getRoleById
     * The endpoint is owned by server REST api service owner
     * @param roleId roleId (required)
     */
    @Headers(
        "X-Operation-ID: getRoleByIdUsingGET"
    )
    @GET("roles/{roleId}")
    suspend fun getRoleByIdUsingGET(
        @retrofit2.http.Path("roleId") roleId: Long
    ): Role
    /**
     * getRoleByRoleType
     * The endpoint is owned by server REST api service owner
     * @param roleType roleType (required)
     */
    @Headers(
        "X-Operation-ID: getRoleByRoleTypeUsingGET"
    )
    @GET("roles/{roleType}")
    suspend fun getRoleByRoleTypeUsingGET(
        @retrofit2.http.Path("roleType") roleType: String
    ): List<Role>
}
