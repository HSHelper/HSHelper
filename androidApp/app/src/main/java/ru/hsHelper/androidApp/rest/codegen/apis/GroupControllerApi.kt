/**
 * NOTE: This class is auto generated by the Swagger Gradle Codegen for the following API: Api Documentation
 *
 * More info on this tool is available on https://github.com/Yelp/swagger-gradle-codegen
 */

package ru.hsHelper.androidApp.rest.codegen.apis

import retrofit2.http.DELETE
import retrofit2.http.GET
import retrofit2.http.Headers
import retrofit2.http.POST
import retrofit2.http.PUT
import ru.hsHelper.androidApp.rest.codegen.models.Group
import ru.hsHelper.androidApp.rest.codegen.models.GroupCreateRequest
import ru.hsHelper.androidApp.rest.codegen.models.GroupUpdateRequest
import ru.hsHelper.androidApp.rest.codegen.models.ObjectsWithRoleAddRequest

@JvmSuppressWildcards
interface GroupControllerApi {
    /**
     * addUsers
     * The endpoint is owned by integration service owner
     * @param id id (required)
     * @param objectsWithRoleAddRequest objectsWithRoleAddRequest (required)
     */
    @Headers(
        "X-Operation-ID: addUsersUsingPUT_2",
      "Content-Type: application/json"
    )
    @PUT("groups/{id}/users")
    suspend fun addUsersUsingPUT2(
        @retrofit2.http.Path("id") id: Long,
        @retrofit2.http.Body objectsWithRoleAddRequest: ObjectsWithRoleAddRequest
    ): Group
    /**
     * createGroup
     * The endpoint is owned by integration service owner
     * @param groupCreateRequest groupCreateRequest (required)
     */
    @Headers(
        "X-Operation-ID: createGroupUsingPOST",
      "Content-Type: application/json"
    )
    @POST("groups/")
    suspend fun createGroupUsingPOST(
        @retrofit2.http.Body groupCreateRequest: GroupCreateRequest
    ): Group
    /**
     * deleteGroup
     * The endpoint is owned by integration service owner
     * @param id id (required)
     */
    @Headers(
        "X-Operation-ID: deleteGroupUsingDELETE"
    )
    @DELETE("groups/{id}")
    suspend fun deleteGroupUsingDELETE(
        @retrofit2.http.Path("id") id: Long
    ): Unit
    /**
     * deleteUsers
     * The endpoint is owned by integration service owner
     * @param id id (required)
     * @param userIds userIds (required)
     */
    @Headers(
        "X-Operation-ID: deleteUsersUsingDELETE_2"
    )
    @DELETE("groups/{id}/users")
    suspend fun deleteUsersUsingDELETE2(
        @retrofit2.http.Path("id") id: Long,
        @retrofit2.http.Body userIds: List<Long>
    ): Group
    /**
     * getAll
     * The endpoint is owned by integration service owner
     */
    @Headers(
        "X-Operation-ID: getAllUsingGET_2"
    )
    @GET("groups/")
    suspend fun getAllUsingGET2(): List<Group>
    /**
     * getGroup
     * The endpoint is owned by integration service owner
     * @param id id (required)
     */
    @Headers(
        "X-Operation-ID: getGroupUsingGET"
    )
    @GET("groups/{id}")
    suspend fun getGroupUsingGET(
        @retrofit2.http.Path("id") id: Long
    ): Group
    /**
     * updateGroup
     * The endpoint is owned by integration service owner
     * @param groupUpdateRequest groupUpdateRequest (required)
     * @param id id (required)
     */
    @Headers(
        "X-Operation-ID: updateGroupUsingPUT",
      "Content-Type: application/json"
    )
    @PUT("groups/{id}")
    suspend fun updateGroupUsingPUT(
        @retrofit2.http.Body groupUpdateRequest: GroupUpdateRequest,
        @retrofit2.http.Path("id") id: Long
    ): Group
}
