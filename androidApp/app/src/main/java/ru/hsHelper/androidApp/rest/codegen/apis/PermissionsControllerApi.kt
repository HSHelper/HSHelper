/**
 * NOTE: This class is auto generated by the Swagger Gradle Codegen for the following API: Api Documentation
 *
 * More info on this tool is available on https://github.com/Yelp/swagger-gradle-codegen
 */

package ru.hsHelper.androidApp.rest.codegen.apis

import retrofit2.http.DELETE
import retrofit2.http.GET
import retrofit2.http.Headers
import retrofit2.http.POST
import ru.hsHelper.androidApp.rest.codegen.models.Permissions
import ru.hsHelper.androidApp.rest.codegen.models.Role

@JvmSuppressWildcards
interface PermissionsControllerApi {
    /**
     * createPermission
     * The endpoint is owned by server REST api service owner
     * @param permissionType permissionType (required)
     */
    @Headers(
        "X-Operation-ID: createPermissionUsingPOST",
      "Content-Type: application/json"
    )
    @POST("permissions")
    suspend fun createPermissionUsingPOST(
        @retrofit2.http.Body permissionType: String
    ): Permissions
    /**
     * createPermission
     * The endpoint is owned by server REST api service owner
     * @param permissionType permissionType (required)
     */
    @Headers(
        "X-Operation-ID: createPermissionUsingPOST_1",
      "Content-Type: application/json"
    )
    @POST("permissions/")
    suspend fun createPermissionUsingPOST1(
        @retrofit2.http.Body permissionType: String
    ): Permissions
    /**
     * deletePermission
     * The endpoint is owned by server REST api service owner
     * @param id id (required)
     */
    @Headers(
        "X-Operation-ID: deletePermissionUsingDELETE_1"
    )
    @DELETE("permissions/{id}")
    suspend fun deletePermissionUsingDELETE1(
        @retrofit2.http.Path("id") id: Long
    ): Unit
    /**
     * getAllPermissions
     * The endpoint is owned by server REST api service owner
     */
    @Headers(
        "X-Operation-ID: getAllPermissionsUsingGET"
    )
    @GET("permissions/")
    suspend fun getAllPermissionsUsingGET(): List<Permissions>
    /**
     * getAllRoles
     * The endpoint is owned by server REST api service owner
     * @param id id (required)
     */
    @Headers(
        "X-Operation-ID: getAllRolesUsingGET"
    )
    @GET("permissions/{id}/roles")
    suspend fun getAllRolesUsingGET(
        @retrofit2.http.Path("id") id: Long
    ): List<Role>
    /**
     * getPermissionById
     * The endpoint is owned by server REST api service owner
     * @param id id (required)
     */
    @Headers(
        "X-Operation-ID: getPermissionByIdUsingGET"
    )
    @GET("permissions/{id}")
    suspend fun getPermissionByIdUsingGET(
        @retrofit2.http.Path("id") id: Long
    ): Permissions
    /**
     * getPermissionByPermissionType
     * The endpoint is owned by server REST api service owner
     * @param permissionType permissionType (required)
     */
    @Headers(
        "X-Operation-ID: getPermissionByPermissionTypeUsingGET"
    )
    @GET("permissions/{permissionType}")
    suspend fun getPermissionByPermissionTypeUsingGET(
        @retrofit2.http.Path("permissionType") permissionType: String
    ): Permissions
}
